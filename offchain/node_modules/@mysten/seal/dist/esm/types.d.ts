export declare const IBEEncryptions: import("@mysten/sui/bcs").BcsType<{
    BonehFranklinBLS12381: {
        encapsulation: Uint8Array<ArrayBufferLike>;
        shares: Uint8Array<ArrayBufferLike>[];
    };
    $kind: "BonehFranklinBLS12381";
}, {
    BonehFranklinBLS12381: {
        encapsulation: Iterable<number>;
        shares: Iterable<Iterable<number>> & {
            length: number;
        };
    };
}>;
export type IBEEncryptionsType = typeof IBEEncryptions.$inferType;
export declare const Ciphertext: import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Aes256Gcm: {
        blob: number[];
        aad: number[] | null;
    };
    Plain: {};
}, "Aes256Gcm" | "Plain">, import("@mysten/bcs").EnumInputShape<{
    Aes256Gcm: {
        blob: Iterable<number> & {
            length: number;
        };
        aad: (Iterable<number> & {
            length: number;
        }) | null | undefined;
    };
    Plain: {};
}>>;
export type CiphertextType = typeof Ciphertext.$inferInput;
/**
 * The encrypted object format. Should be aligned with the Rust implementation.
 */
export declare const EncryptedObject: import("@mysten/sui/bcs").BcsType<{
    version: number;
    package_id: Uint8Array<ArrayBufferLike>;
    id: number[];
    services: [Uint8Array<ArrayBufferLike>, number][];
    threshold: number;
    encrypted_shares: {
        BonehFranklinBLS12381: {
            encapsulation: Uint8Array<ArrayBufferLike>;
            shares: Uint8Array<ArrayBufferLike>[];
        };
        $kind: "BonehFranklinBLS12381";
    };
    ciphertext: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Aes256Gcm: {
            blob: number[];
            aad: number[] | null;
        };
        Plain: {};
    }, "Aes256Gcm" | "Plain">;
}, {
    version: number;
    package_id: Iterable<number>;
    id: Iterable<number> & {
        length: number;
    };
    services: Iterable<readonly [Iterable<number>, number]> & {
        length: number;
    };
    threshold: number;
    encrypted_shares: {
        BonehFranklinBLS12381: {
            encapsulation: Iterable<number>;
            shares: Iterable<Iterable<number>> & {
                length: number;
            };
        };
    };
    ciphertext: import("@mysten/bcs").EnumInputShape<{
        Aes256Gcm: {
            blob: Iterable<number> & {
                length: number;
            };
            aad: (Iterable<number> & {
                length: number;
            }) | null | undefined;
        };
        Plain: {};
    }>;
}>;
