import { split as externalSplit } from "shamir-secret-sharing";
import { BonehFranklinBLS12381Services, DST } from "./ibe.js";
import { KeyServerType } from "./key-server.js";
import { EncryptedObject } from "./types.js";
import { createFullId } from "./utils.js";
const MAX_U8 = 255;
async function encrypt({
  keyServers,
  threshold,
  packageId,
  id,
  encryptionInput
}) {
  if (keyServers.length < threshold || threshold === 0 || keyServers.length > MAX_U8 || threshold > MAX_U8 || packageId.length !== 32) {
    throw new Error("Invalid input");
  }
  if (keyServers.some((server) => server.keyType !== KeyServerType.BonehFranklinBLS12381)) {
    throw new Error("Key type is not supported");
  }
  const ibeServers = new BonehFranklinBLS12381Services(keyServers);
  const key = await encryptionInput.generateKey();
  const ciphertext = await encryptionInput.encrypt(key);
  const shares = await split(key, ibeServers.size(), threshold);
  const fullId = createFullId(DST, packageId, id);
  const encrypted_shares = ibeServers.encryptBatched(
    fullId,
    shares.map(({ share, index }) => ({
      msg: share,
      info: new Uint8Array([index])
    }))
  );
  const services = ibeServers.getObjectIds().map((id2, i) => [id2, shares[i].index]);
  return {
    encryptedObject: EncryptedObject.serialize({
      version: 0,
      package_id: packageId,
      id,
      services,
      threshold,
      encrypted_shares,
      ciphertext
    }).toBytes(),
    key
  };
}
async function split(secret, n, threshold) {
  if (n === 0 || threshold === 0 || threshold > n) {
    throw new Error("Invalid input");
  } else if (threshold === 1) {
    const result = [];
    for (let i = 0; i < n; i++) {
      result.push({ share: secret, index: i });
    }
    return Promise.resolve(result);
  }
  return externalSplit(secret, n, threshold).then(
    (share) => share.map((s) => ({
      share: s.subarray(0, s.length - 1),
      // split() returns the share index in the last byte
      index: s[s.length - 1]
    }))
  );
}
export {
  MAX_U8,
  encrypt
};
//# sourceMappingURL=encrypt.js.map
