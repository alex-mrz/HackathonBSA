import { G1Element, G2Element, Scalar } from "./bls12381.js";
import { kdf } from "./kdf.js";
import { xor } from "./utils.js";
const DST = new TextEncoder().encode("SUI-SEAL-IBE-BLS12381-00");
const DST_POP = new TextEncoder().encode("SUI-SEAL-IBE-BLS12381-00-POP");
class IBEServers {
  constructor(object_ids) {
    this.object_ids = object_ids;
  }
  /**
   * The object IDs of the key servers.
   */
  getObjectIds() {
    return this.object_ids;
  }
  /**
   * The number of key servers.
   */
  size() {
    return this.object_ids.length;
  }
}
class BonehFranklinBLS12381Services extends IBEServers {
  constructor(services) {
    super(services.map((service) => service.objectId));
    this.public_keys = services.map((service) => G2Element.fromBytes(service.pk));
  }
  encryptBatched(id, msg_and_infos) {
    if (this.public_keys.length === 0 || this.public_keys.length !== msg_and_infos.length) {
      throw new Error("Invalid input");
    }
    const [nonce, keys] = encapBatched(this.public_keys, id);
    const encrypted_msgs = msg_and_infos.map(
      (msg_and_info, i) => xor(msg_and_info.msg, kdf(keys[i], msg_and_info.info))
    );
    return {
      BonehFranklinBLS12381: {
        encapsulation: nonce.toBytes(),
        shares: encrypted_msgs
      },
      $kind: "BonehFranklinBLS12381"
    };
  }
  /**
   * Returns true if the user secret key is valid for the given public key and id.
   * @param user_secret_key - The user secret key.
   * @param id - The identity.
   * @param public_key - The public key.
   * @returns True if the user secret key is valid for the given public key and id.
   */
  static verifyUserSecretKey(user_secret_key, id, public_key) {
    const lhs = user_secret_key.pairing(G2Element.generator()).toBytes();
    const rhs = G1Element.hashToCurve(id).pairing(public_key).toBytes();
    return lhs.length === rhs.length && lhs.every((value, index) => value === rhs[index]);
  }
  /**
   * Identity-based decryption.
   *
   * @param nonce The encryption nonce.
   * @param sk The user secret key.
   * @param ciphertext The encrypted message.
   * @param info An info parameter also included in the KDF.
   * @returns The decrypted message.
   */
  static decrypt(nonce, sk, ciphertext, info) {
    return xor(ciphertext, kdf(decap(nonce, sk), info));
  }
}
function encapBatched(public_keys, id) {
  if (public_keys.length === 0) {
    throw new Error("Invalid input");
  }
  const r = Scalar.random();
  const nonce = G2Element.generator().multiply(r);
  const gid = G1Element.hashToCurve(id).multiply(r);
  return [nonce, public_keys.map((public_key) => gid.pairing(public_key))];
}
function decap(nonce, usk) {
  return usk.pairing(nonce);
}
export {
  BonehFranklinBLS12381Services,
  DST,
  DST_POP,
  IBEServers
};
//# sourceMappingURL=ibe.js.map
