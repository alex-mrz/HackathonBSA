import { G1Element, G2Element } from './bls12381.js';
import type { KeyServer } from './key-server.js';
import type { IBEEncryptionsType } from './types.js';
/**
 * The domain separation tag for the hash-to-group function.
 */
export declare const DST: Uint8Array;
/**
 * The domain separation tag for the signing proof of possession.
 */
export declare const DST_POP: Uint8Array;
/**
 * The interface for the key servers.
 */
export declare abstract class IBEServers {
    protected readonly object_ids: Uint8Array[];
    protected constructor(object_ids: Uint8Array[]);
    /**
     * The object IDs of the key servers.
     */
    getObjectIds(): Uint8Array[];
    /**
     * The number of key servers.
     */
    size(): number;
    /**
     * Encrypt a batch of messages for the given identity.
     *
     * @param id The identity.
     * @param msg_and_infos The messages and an additional info parameter which will be included in the KDF.
     * @returns The encrypted messages.
     */
    abstract encryptBatched(id: Uint8Array, msg_and_infos: {
        msg: Uint8Array;
        info: Uint8Array;
    }[]): IBEEncryptionsType;
}
/**
 * Identity-based encryption based on the Boneh-Franklin IBE scheme.
 * This object represents a set of key servers that can be used to encrypt messages for a given identity.
 */
export declare class BonehFranklinBLS12381Services extends IBEServers {
    readonly public_keys: G2Element[];
    constructor(services: KeyServer[]);
    encryptBatched(id: Uint8Array, msg_and_infos: {
        msg: Uint8Array;
        info: Uint8Array;
    }[]): IBEEncryptionsType;
    /**
     * Returns true if the user secret key is valid for the given public key and id.
     * @param user_secret_key - The user secret key.
     * @param id - The identity.
     * @param public_key - The public key.
     * @returns True if the user secret key is valid for the given public key and id.
     */
    static verifyUserSecretKey(user_secret_key: G1Element, id: Uint8Array, public_key: G2Element): boolean;
    /**
     * Identity-based decryption.
     *
     * @param nonce The encryption nonce.
     * @param sk The user secret key.
     * @param ciphertext The encrypted message.
     * @param info An info parameter also included in the KDF.
     * @returns The decrypted message.
     */
    static decrypt(nonce: G2Element, sk: G1Element, ciphertext: Uint8Array, info: Uint8Array): Uint8Array;
}
