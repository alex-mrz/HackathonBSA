import type { CiphertextType } from './types.js';
export declare const iv: Uint8Array<ArrayBuffer>;
export interface EncryptionInput {
    encrypt(key: Uint8Array): Promise<CiphertextType>;
    generateKey(): Promise<Uint8Array>;
}
export declare class AesGcm256 implements EncryptionInput {
    readonly plaintext: Uint8Array;
    readonly aad: Uint8Array;
    constructor(msg: Uint8Array, aad: Uint8Array);
    generateKey(): Promise<Uint8Array>;
    encrypt(key: Uint8Array): Promise<CiphertextType>;
    static decrypt(key: Uint8Array, ciphertext: CiphertextType): Promise<Uint8Array>;
}
export declare class Plain implements EncryptionInput {
    encrypt(_key: Uint8Array): Promise<CiphertextType>;
    generateKey(): Promise<Uint8Array>;
}
