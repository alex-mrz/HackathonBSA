"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var encrypt_exports = {};
__export(encrypt_exports, {
  MAX_U8: () => MAX_U8,
  encrypt: () => encrypt
});
module.exports = __toCommonJS(encrypt_exports);
var import_shamir_secret_sharing = require("shamir-secret-sharing");
var import_ibe = require("./ibe.js");
var import_key_server = require("./key-server.js");
var import_types = require("./types.js");
var import_utils = require("./utils.js");
const MAX_U8 = 255;
async function encrypt({
  keyServers,
  threshold,
  packageId,
  id,
  encryptionInput
}) {
  if (keyServers.length < threshold || threshold === 0 || keyServers.length > MAX_U8 || threshold > MAX_U8 || packageId.length !== 32) {
    throw new Error("Invalid input");
  }
  if (keyServers.some((server) => server.keyType !== import_key_server.KeyServerType.BonehFranklinBLS12381)) {
    throw new Error("Key type is not supported");
  }
  const ibeServers = new import_ibe.BonehFranklinBLS12381Services(keyServers);
  const key = await encryptionInput.generateKey();
  const ciphertext = await encryptionInput.encrypt(key);
  const shares = await split(key, ibeServers.size(), threshold);
  const fullId = (0, import_utils.createFullId)(import_ibe.DST, packageId, id);
  const encrypted_shares = ibeServers.encryptBatched(
    fullId,
    shares.map(({ share, index }) => ({
      msg: share,
      info: new Uint8Array([index])
    }))
  );
  const services = ibeServers.getObjectIds().map((id2, i) => [id2, shares[i].index]);
  return {
    encryptedObject: import_types.EncryptedObject.serialize({
      version: 0,
      package_id: packageId,
      id,
      services,
      threshold,
      encrypted_shares,
      ciphertext
    }).toBytes(),
    key
  };
}
async function split(secret, n, threshold) {
  if (n === 0 || threshold === 0 || threshold > n) {
    throw new Error("Invalid input");
  } else if (threshold === 1) {
    const result = [];
    for (let i = 0; i < n; i++) {
      result.push({ share: secret, index: i });
    }
    return Promise.resolve(result);
  }
  return (0, import_shamir_secret_sharing.split)(secret, n, threshold).then(
    (share) => share.map((s) => ({
      share: s.subarray(0, s.length - 1),
      // split() returns the share index in the last byte
      index: s[s.length - 1]
    }))
  );
}
//# sourceMappingURL=encrypt.js.map
