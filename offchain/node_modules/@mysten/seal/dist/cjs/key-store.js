"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var key_store_exports = {};
__export(key_store_exports, {
  KeyStore: () => KeyStore
});
module.exports = __toCommonJS(key_store_exports);
var import_bcs = require("@mysten/bcs");
var import_shamir_secret_sharing = require("shamir-secret-sharing");
var import_aes = require("./aes.js");
var import_bls12381 = require("./bls12381.js");
var import_elgamal = require("./elgamal.js");
var import_ibe = require("./ibe.js");
var import_key_server = require("./key-server.js");
var import_utils = require("./utils.js");
class KeyStore {
  constructor() {
    this.keys_map = /* @__PURE__ */ new Map();
  }
  createMapKey(fullId, objectId) {
    return (0, import_bcs.toHex)(fullId) + ":" + (0, import_bcs.toHex)(objectId);
  }
  /** @internal */
  addKey(fullId, objectId, key) {
    this.keys_map.set(this.createMapKey(fullId, objectId), key);
  }
  /**
   * Get a key from this KeyStore or undefined if the key is not found.
   *
   * @param fullId The full ID used to derive the key.
   * @param objectId The object ID of the key server holding the key.
   */
  getKey(fullId, objectId) {
    return this.keys_map.get(this.createMapKey(fullId, objectId));
  }
  /**
   * Check if the key store has a key for the given full ID and object ID.
   *
   * @param fullId The full ID used to derive the key.
   * @param objectId The object ID of the key server holding the key.
   */
  hasKey(fullId, objectId) {
    return this.keys_map.has(this.createMapKey(fullId, objectId));
  }
  /**
   * Look up URLs of key servers and fetch key from servers with request signature,
   * cert and ephPk, then updates the caching keys_map.
   */
  async fetchKeys({
    keyServers,
    threshold: _threshold,
    packageId,
    ids,
    txBytes,
    sessionKey
  }) {
    if (ids.length !== 1) {
      throw new Error("Only one ID is supported");
    }
    const fullId = (0, import_utils.createFullId)(import_ibe.DST, packageId, ids[0]);
    const remainingKeyServers = keyServers.filter((ks) => !this.hasKey(fullId, ks.objectId));
    if (remainingKeyServers.length === 0) {
      return;
    }
    const cert = sessionKey.getCertificate();
    const signedRequest = await sessionKey.createRequestParams(txBytes);
    await Promise.all(
      remainingKeyServers.map(async (server) => {
        if (server.keyType !== import_key_server.KeyServerType.BonehFranklinBLS12381) {
          console.warn("Server has invalid key type: " + server.keyType);
          return;
        }
        const res = await fetchKey(
          server.url,
          signedRequest.request_signature,
          txBytes,
          signedRequest.decryption_key,
          cert
        );
        const key = import_bls12381.G1Element.fromBytes(res.key);
        if (!import_ibe.BonehFranklinBLS12381Services.verifyUserSecretKey(
          key,
          fullId,
          import_bls12381.G2Element.fromBytes(server.pk)
        )) {
          console.warn("Received invalid key from key server " + server.objectId);
          return;
        }
        this.addKey(fullId, server.objectId, key);
      })
    );
  }
  /**
   * Decrypt the given encrypted bytes with the given cached secret keys for the full ID.
   * It's assumed that fetchKeys has been called to fetch the secret keys for enough key servers
   * otherwise, this will throw an error.
   *
   * @param encryptedObject - EncryptedObject.
   * @returns - The decrypted plaintext corresponding to ciphertext.
   */
  async decrypt(encryptedObject) {
    if (!encryptedObject.encrypted_shares.BonehFranklinBLS12381) {
      throw new Error("Encryption mode not supported");
    }
    const fullId = (0, import_utils.createFullId)(
      import_ibe.DST,
      encryptedObject.package_id,
      new Uint8Array(encryptedObject.id)
    );
    const in_keystore = encryptedObject.services.map((_, i) => i).filter((i) => this.hasKey(fullId, encryptedObject.services[i][0]));
    if (in_keystore.length < encryptedObject.threshold) {
      throw new Error("Not enough shares. Please fetch more keys.");
    }
    const encryptedShares = encryptedObject.encrypted_shares.BonehFranklinBLS12381.shares;
    if (encryptedShares.length !== encryptedObject.services.length) {
      throw new Error("Invalid input");
    }
    const nonce = import_bls12381.G2Element.fromBytes(
      encryptedObject.encrypted_shares.BonehFranklinBLS12381.encapsulation
    );
    const shares = in_keystore.map((i) => {
      const [objectId, index] = encryptedObject.services[i];
      const info = new Uint8Array([index]);
      let share = import_ibe.BonehFranklinBLS12381Services.decrypt(
        nonce,
        this.getKey(fullId, objectId),
        encryptedShares[i],
        info
      );
      return { index, share };
    });
    const key = await combine(shares);
    if (encryptedObject.ciphertext.Aes256Gcm) {
      try {
        return import_aes.AesGcm256.decrypt(key, encryptedObject.ciphertext);
      } catch {
        throw new Error("Decryption failed");
      }
    } else if (encryptedObject.ciphertext.Plain) {
      return key;
    } else {
      throw new Error("Invalid encrypted object");
    }
  }
}
async function fetchKey(url, requestSig, txBytes, enc_key, certificate) {
  const enc_key_pk = (0, import_elgamal.toPublicKey)(enc_key);
  const enc_verification_key = (0, import_elgamal.toVerificationKey)(enc_key);
  const body = {
    ptb: (0, import_bcs.toBase64)(txBytes.slice(1)),
    // removes the byte of the transaction type version
    enc_key: (0, import_bcs.toBase64)(enc_key_pk),
    enc_verification_key: (0, import_bcs.toBase64)(enc_verification_key),
    request_signature: requestSig,
    // already b64
    certificate
  };
  const response = await fetch(url + "/v1/fetch_key", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(body)
  });
  const resp = await response.json();
  const key = (0, import_elgamal.elgamalDecrypt)(enc_key, resp.decryption_keys[0].encrypted_key.map(import_bcs.fromBase64));
  return {
    fullId: resp.decryption_keys[0].fullId,
    key
  };
}
async function combine(shares) {
  if (shares.length === 0) {
    throw new Error("Invalid input");
  } else if (shares.length === 1) {
    return Promise.resolve(shares[0].share);
  }
  return (0, import_shamir_secret_sharing.combine)(
    shares.map(({ index, share }) => {
      const packedShare = new Uint8Array(share.length + 1);
      packedShare.set(share, 0);
      packedShare[share.length] = index;
      return packedShare;
    })
  );
}
//# sourceMappingURL=key-store.js.map
