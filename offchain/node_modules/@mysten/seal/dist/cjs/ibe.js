"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ibe_exports = {};
__export(ibe_exports, {
  BonehFranklinBLS12381Services: () => BonehFranklinBLS12381Services,
  DST: () => DST,
  DST_POP: () => DST_POP,
  IBEServers: () => IBEServers
});
module.exports = __toCommonJS(ibe_exports);
var import_bls12381 = require("./bls12381.js");
var import_kdf = require("./kdf.js");
var import_utils = require("./utils.js");
const DST = new TextEncoder().encode("SUI-SEAL-IBE-BLS12381-00");
const DST_POP = new TextEncoder().encode("SUI-SEAL-IBE-BLS12381-00-POP");
class IBEServers {
  constructor(object_ids) {
    this.object_ids = object_ids;
  }
  /**
   * The object IDs of the key servers.
   */
  getObjectIds() {
    return this.object_ids;
  }
  /**
   * The number of key servers.
   */
  size() {
    return this.object_ids.length;
  }
}
class BonehFranklinBLS12381Services extends IBEServers {
  constructor(services) {
    super(services.map((service) => service.objectId));
    this.public_keys = services.map((service) => import_bls12381.G2Element.fromBytes(service.pk));
  }
  encryptBatched(id, msg_and_infos) {
    if (this.public_keys.length === 0 || this.public_keys.length !== msg_and_infos.length) {
      throw new Error("Invalid input");
    }
    const [nonce, keys] = encapBatched(this.public_keys, id);
    const encrypted_msgs = msg_and_infos.map(
      (msg_and_info, i) => (0, import_utils.xor)(msg_and_info.msg, (0, import_kdf.kdf)(keys[i], msg_and_info.info))
    );
    return {
      BonehFranklinBLS12381: {
        encapsulation: nonce.toBytes(),
        shares: encrypted_msgs
      },
      $kind: "BonehFranklinBLS12381"
    };
  }
  /**
   * Returns true if the user secret key is valid for the given public key and id.
   * @param user_secret_key - The user secret key.
   * @param id - The identity.
   * @param public_key - The public key.
   * @returns True if the user secret key is valid for the given public key and id.
   */
  static verifyUserSecretKey(user_secret_key, id, public_key) {
    const lhs = user_secret_key.pairing(import_bls12381.G2Element.generator()).toBytes();
    const rhs = import_bls12381.G1Element.hashToCurve(id).pairing(public_key).toBytes();
    return lhs.length === rhs.length && lhs.every((value, index) => value === rhs[index]);
  }
  /**
   * Identity-based decryption.
   *
   * @param nonce The encryption nonce.
   * @param sk The user secret key.
   * @param ciphertext The encrypted message.
   * @param info An info parameter also included in the KDF.
   * @returns The decrypted message.
   */
  static decrypt(nonce, sk, ciphertext, info) {
    return (0, import_utils.xor)(ciphertext, (0, import_kdf.kdf)(decap(nonce, sk), info));
  }
}
function encapBatched(public_keys, id) {
  if (public_keys.length === 0) {
    throw new Error("Invalid input");
  }
  const r = import_bls12381.Scalar.random();
  const nonce = import_bls12381.G2Element.generator().multiply(r);
  const gid = import_bls12381.G1Element.hashToCurve(id).multiply(r);
  return [nonce, public_keys.map((public_key) => gid.pairing(public_key))];
}
function decap(nonce, usk) {
  return usk.pairing(nonce);
}
//# sourceMappingURL=ibe.js.map
