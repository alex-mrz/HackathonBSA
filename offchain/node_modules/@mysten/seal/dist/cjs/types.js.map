{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\n\nexport const IBEEncryptions = bcs.enum('IBEEncryptions', {\n\tBonehFranklinBLS12381: bcs.struct('BonehFranklinBLS12381', {\n\t\tencapsulation: bcs.bytes(96),\n\t\tshares: bcs.vector(bcs.bytes(32)),\n\t}),\n});\nexport type IBEEncryptionsType = typeof IBEEncryptions.$inferType;\n\nexport const Ciphertext = bcs.enum('Ciphertext', {\n\tAes256Gcm: bcs.struct('Aes256Gcm', {\n\t\tblob: bcs.vector(bcs.U8),\n\t\taad: bcs.option(bcs.vector(bcs.U8)),\n\t}),\n\tPlain: bcs.struct('Plain', {}),\n});\nexport type CiphertextType = typeof Ciphertext.$inferInput;\n\n/**\n * The encrypted object format. Should be aligned with the Rust implementation.\n */\nexport const EncryptedObject = bcs.struct('EncryptedObject', {\n\tversion: bcs.U8,\n\tpackage_id: bcs.bytes(32),\n\tid: bcs.vector(bcs.U8),\n\tservices: bcs.vector(bcs.tuple([bcs.bytes(32), bcs.U8])),\n\tthreshold: bcs.U8,\n\tencrypted_shares: IBEEncryptions,\n\tciphertext: Ciphertext,\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAoB;AAEb,MAAM,iBAAiB,eAAI,KAAK,kBAAkB;AAAA,EACxD,uBAAuB,eAAI,OAAO,yBAAyB;AAAA,IAC1D,eAAe,eAAI,MAAM,EAAE;AAAA,IAC3B,QAAQ,eAAI,OAAO,eAAI,MAAM,EAAE,CAAC;AAAA,EACjC,CAAC;AACF,CAAC;AAGM,MAAM,aAAa,eAAI,KAAK,cAAc;AAAA,EAChD,WAAW,eAAI,OAAO,aAAa;AAAA,IAClC,MAAM,eAAI,OAAO,eAAI,EAAE;AAAA,IACvB,KAAK,eAAI,OAAO,eAAI,OAAO,eAAI,EAAE,CAAC;AAAA,EACnC,CAAC;AAAA,EACD,OAAO,eAAI,OAAO,SAAS,CAAC,CAAC;AAC9B,CAAC;AAMM,MAAM,kBAAkB,eAAI,OAAO,mBAAmB;AAAA,EAC5D,SAAS,eAAI;AAAA,EACb,YAAY,eAAI,MAAM,EAAE;AAAA,EACxB,IAAI,eAAI,OAAO,eAAI,EAAE;AAAA,EACrB,UAAU,eAAI,OAAO,eAAI,MAAM,CAAC,eAAI,MAAM,EAAE,GAAG,eAAI,EAAE,CAAC,CAAC;AAAA,EACvD,WAAW,eAAI;AAAA,EACf,kBAAkB;AAAA,EAClB,YAAY;AACb,CAAC;",
  "names": []
}
